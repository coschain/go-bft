// Code generated by MockGen. DO NOT EDIT.
// Source: Ivalidator.go

// Package custom is a generated GoMock package.
package custom

import (
	message "github.com/coschain/go-bft/message"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIValidators is a mock of IValidators interface
type MockIValidators struct {
	ctrl     *gomock.Controller
	recorder *MockIValidatorsMockRecorder
}

// MockIValidatorsMockRecorder is the mock recorder for MockIValidators
type MockIValidatorsMockRecorder struct {
	mock *MockIValidators
}

// NewMockIValidators creates a new mock instance
func NewMockIValidators(ctrl *gomock.Controller) *MockIValidators {
	mock := &MockIValidators{ctrl: ctrl}
	mock.recorder = &MockIValidatorsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIValidators) EXPECT() *MockIValidatorsMockRecorder {
	return m.recorder
}

// GetValidator mocks base method
func (m *MockIValidators) GetValidator(key message.PubKey) IPubValidator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidator", key)
	ret0, _ := ret[0].(IPubValidator)
	return ret0
}

// GetValidator indicates an expected call of GetValidator
func (mr *MockIValidatorsMockRecorder) GetValidator(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidator", reflect.TypeOf((*MockIValidators)(nil).GetValidator), key)
}

// IsValidator mocks base method
func (m *MockIValidators) IsValidator(key message.PubKey) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValidator", key)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsValidator indicates an expected call of IsValidator
func (mr *MockIValidatorsMockRecorder) IsValidator(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValidator", reflect.TypeOf((*MockIValidators)(nil).IsValidator), key)
}

// TotalVotingPower mocks base method
func (m *MockIValidators) TotalVotingPower() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TotalVotingPower")
	ret0, _ := ret[0].(int64)
	return ret0
}

// TotalVotingPower indicates an expected call of TotalVotingPower
func (mr *MockIValidatorsMockRecorder) TotalVotingPower() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TotalVotingPower", reflect.TypeOf((*MockIValidators)(nil).TotalVotingPower))
}

// GetCurrentProposer mocks base method
func (m *MockIValidators) GetCurrentProposer() IPubValidator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentProposer")
	ret0, _ := ret[0].(IPubValidator)
	return ret0
}

// GetCurrentProposer indicates an expected call of GetCurrentProposer
func (mr *MockIValidatorsMockRecorder) GetCurrentProposer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentProposer", reflect.TypeOf((*MockIValidators)(nil).GetCurrentProposer))
}

// DecidesProposal mocks base method
func (m *MockIValidators) DecidesProposal() message.ProposedData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecidesProposal")
	ret0, _ := ret[0].(message.ProposedData)
	return ret0
}

// DecidesProposal indicates an expected call of DecidesProposal
func (mr *MockIValidatorsMockRecorder) DecidesProposal() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecidesProposal", reflect.TypeOf((*MockIValidators)(nil).DecidesProposal))
}

// Commit mocks base method
func (m *MockIValidators) Commit(p message.ProposedData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", p)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit
func (mr *MockIValidatorsMockRecorder) Commit(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockIValidators)(nil).Commit), p)
}

// MockIPubValidator is a mock of IPubValidator interface
type MockIPubValidator struct {
	ctrl     *gomock.Controller
	recorder *MockIPubValidatorMockRecorder
}

// MockIPubValidatorMockRecorder is the mock recorder for MockIPubValidator
type MockIPubValidatorMockRecorder struct {
	mock *MockIPubValidator
}

// NewMockIPubValidator creates a new mock instance
func NewMockIPubValidator(ctrl *gomock.Controller) *MockIPubValidator {
	mock := &MockIPubValidator{ctrl: ctrl}
	mock.recorder = &MockIPubValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIPubValidator) EXPECT() *MockIPubValidatorMockRecorder {
	return m.recorder
}

// VerifySig mocks base method
func (m *MockIPubValidator) VerifySig(digest, signature []byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifySig", digest, signature)
	ret0, _ := ret[0].(bool)
	return ret0
}

// VerifySig indicates an expected call of VerifySig
func (mr *MockIPubValidatorMockRecorder) VerifySig(digest, signature interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifySig", reflect.TypeOf((*MockIPubValidator)(nil).VerifySig), digest, signature)
}

// GetPubKey mocks base method
func (m *MockIPubValidator) GetPubKey() message.PubKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPubKey")
	ret0, _ := ret[0].(message.PubKey)
	return ret0
}

// GetPubKey indicates an expected call of GetPubKey
func (mr *MockIPubValidatorMockRecorder) GetPubKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPubKey", reflect.TypeOf((*MockIPubValidator)(nil).GetPubKey))
}

// GetVotingPower mocks base method
func (m *MockIPubValidator) GetVotingPower() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVotingPower")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetVotingPower indicates an expected call of GetVotingPower
func (mr *MockIPubValidatorMockRecorder) GetVotingPower() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVotingPower", reflect.TypeOf((*MockIPubValidator)(nil).GetVotingPower))
}

// SetVotingPower mocks base method
func (m *MockIPubValidator) SetVotingPower(arg0 int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetVotingPower", arg0)
}

// SetVotingPower indicates an expected call of SetVotingPower
func (mr *MockIPubValidatorMockRecorder) SetVotingPower(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVotingPower", reflect.TypeOf((*MockIPubValidator)(nil).SetVotingPower), arg0)
}

// MockIPrivValidator is a mock of IPrivValidator interface
type MockIPrivValidator struct {
	ctrl     *gomock.Controller
	recorder *MockIPrivValidatorMockRecorder
}

// MockIPrivValidatorMockRecorder is the mock recorder for MockIPrivValidator
type MockIPrivValidatorMockRecorder struct {
	mock *MockIPrivValidator
}

// NewMockIPrivValidator creates a new mock instance
func NewMockIPrivValidator(ctrl *gomock.Controller) *MockIPrivValidator {
	mock := &MockIPrivValidator{ctrl: ctrl}
	mock.recorder = &MockIPrivValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIPrivValidator) EXPECT() *MockIPrivValidatorMockRecorder {
	return m.recorder
}

// GetPubKey mocks base method
func (m *MockIPrivValidator) GetPubKey() message.PubKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPubKey")
	ret0, _ := ret[0].(message.PubKey)
	return ret0
}

// GetPubKey indicates an expected call of GetPubKey
func (mr *MockIPrivValidatorMockRecorder) GetPubKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPubKey", reflect.TypeOf((*MockIPrivValidator)(nil).GetPubKey))
}

// Sign mocks base method
func (m *MockIPrivValidator) Sign(digest []byte) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", digest)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Sign indicates an expected call of Sign
func (mr *MockIPrivValidatorMockRecorder) Sign(digest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockIPrivValidator)(nil).Sign), digest)
}
